#in loc de "interface" - in python nu exista acest keyword, si vom folosi un abstract class
#exista si duck typing - quacks like a duck, works like a duck
# section -adauga add, rm si get

#composite design pattern

from abc import ABC, abstractmethod

class Element(ABC):

    @abstractmethod
    def get(integer):
        pass

    @abstractmethod
    def remove(self):
        pass

    @abstractmethod
    def add(self):
        pass


class Image(Element):
    def __init__(self, imageName):
        self.imageName = imageName

    def __str__(self):
        return self.imageName

    def add(self):
        pass

    def get(integer):
        pass

    def remove(self):
        return super().remove()

class Section(Element):

    def __init__(self, title):
        self.title = title
        self.elements = []

    def __str__(self) -> str:
        result = f'Section: {self.title}\n'
        for i in self.elements:
            result += str(i) + '\n'
        return result
    

    def add(self, element):
        if isinstance(element, Element):
            self.elements.append(element)
        else:
            print("Not an element")

    def get(self, index):
        if index < len(self.elements) and index >= 0:
                return self.elements[index]
        
        else:
            print("no such index")

    def remove(self, element):
        if isinstance(element, Element):
            if element in self.elements:
                self.elements.remove(element)
        else:
            print("not an element")


class Author:

    def __init__(self, name, surname):
        self.name = name
        self.surname = surname

    def __str__(self) -> str:
        return f'{self.name} {self.surname}'
        

    def print(self):
        print(self.name, self.surname)


class Paragraph(Element):

    def __init__(self, string):
        self.string = string

    def __str__(self) -> str:
        return f'Paragraph: {self.string}'

    def add(self):
        pass

    def get(integer):
        pass

    def remove(self):
        pass



class Book(Section):

    def __init__(self, title):
        super().__init__(title)

    def addAuthor(self, a: Author):
        self.author = a

    def addContent(self, a: Element):
        self.elements.append(a)

    def print(self):
        print(f'Book: {self.title}')
        print(f'Author: {self.author}')
        print(' ')
        for i in self.elements:
            print(i)
            



carte = Book("o viata marunta")

autor = Author('hanya', 'yanigahara')

carte.addAuthor(autor)



cap1 = Section("Capitolul 1")
cap11 = Section("Capitloul 1.1")
cap111 = Section("Capitolul 1.1.1")
cap1111 = Section("Capitlolul 1.1.1.1")


carte.addContent(Paragraph("buna seara copii"))
carte.addContent(cap1)

cap1.add(Paragraph("eu sunt carina"))
cap1.add(cap11)
cap11.add(Paragraph("text from subchapter 1.1"))
cap11.add(cap111)
cap111.add(Paragraph("ceva"))
cap111.add(cap1111)
cap1111.add(Image("catelusi"))

carte.print()
