import time
from abc import ABC, abstractmethod
#lab 4 - proxy pattern


class Element(ABC):
    
    @abstractmethod
    def print():
        pass

    @abstractmethod
    def add(self):
        pass

    @abstractmethod
    def remove(self):
        pass

    @abstractmethod
    def get(integer):
        pass


class Picture(ABC):
    
    @abstractmethod
    def url():
        pass

    @abstractmethod
    def dim(self):
        pass

    @abstractmethod
    def content(self):
        pass


    




class Image(Element, Picture):

    def __init__(self, url):
        self.url = url

        try:
            
            time.sleep(5)  # Simulate a 5-second delay
            
        except KeyboardInterrupt:
        # Handle interruption (e.g., user presses Ctrl+C)
            print("Loading interrupted by the user.")

        except Exception as e:
        # Handle other unexpected exceptions
            print(f"An unexpected error occurred: {e}")

        finally:
        # This block always executes
            pass

    def add():
        pass

    def remove():
        pass

    def print(self):
        print(f'Image with name {self.url}')

    def get():
        pass

    def content():
        pass

    def dim():
        pass
    def url():
        pass

class ImageProxy(Picture, Element):

    def __init__(self, url):
        self.url = url
        self.reallmg = None

    def print(self) -> Image:
        if self.reallmg is None:
            self.reallmg = Image(self.url)
            
        return self.reallmg.print()
    

    def content():
        pass

    def dim():
        pass
    def url():
        pass

    def add():
        pass

    def remove():
        pass

    def get():
        pass
        




#classes which inherit from interface element

#concrete implementation of interface element
class ConcreteElement(Element):
    def some_method(self):
        print("Implementation of some_method in ConcreteElement")


#interface AlignSTrategy


class AlignStrategy(ABC):

    @abstractmethod
    def render(self, paragraph):
        pass

class Paragraph(Element):

    def __init__(self, text):
        self.text = text
        self.textAlignment = None

    def add():
        pass

    def get():
        pass

    def remove():
        pass

    def print(self):
        
        if self.textAlignment:
            self.textAlignment.render(self.text)
        else:
            print(self.text)

    def setAlignStrategy(self, align_strategy):
        self.textAlignment = align_strategy

class AlignLeft(AlignStrategy):
    def render(self, paragraph):
        print(f"{paragraph} ##########")

class AlignRight(AlignStrategy):
    def render(self, paragraph):
        print(f"####### {paragraph}")

class AlignCenter(AlignStrategy):
    def render(self, paragraph):
        print(f"#######{paragraph}#######")

#class section is also in aggregation with interface element(it contains an object of type element
# - which will be concreteElement here
class Section(Element):

    def __init__(self, title):
        self.title = title
        self.children = []

    def print(self):
        print(f"Section: {self.title}")
        for child in self.children:
            child.print()

    def add(self, element):
        self.children.append(element)

    def remove(self, element):
        self.children.remove(element)

    def get(self, index):
        if 0 <= index < len(self.children):
            return self.children[index]
        return None

    

    

class TableOfContents(Element):

    def __init__(self, something):
        self.something = something




class Table(Element):
    def __init__(self, something):
        self.something = something




#author is in aggregation with book

class Author():

    def __init__(self, name):
        self.name = name
        

    def print(self):
        print(self.name)

        
#class book inherits from class section and is also in aggregation with class Author
        
class Book(Section):

    def __init__(self, title):
        self.title = title
        self.contents = []
        self.author = None
        
    def addAuthor(self, a: Author):
        self.author = a


    def addContents(self, e: Element):
        
        self.contents.append(e)

    def print(self):
        
        print(self.title)
        if self.author:
            print("cev")
        print("-------------------")
        for content in self.contents:
            content.print()

        

    



if __name__ == "__main__":

    cap1 = Section("Capitolul 1")
    p1 = Paragraph("Paragraph 1")
    cap1.add(p1)
    p2 = Paragraph("Paragraph 2")
    cap1.add(p2)
    p3 = Paragraph("Paragraph 3")
    cap1.add(p3)

    print("Printing without alignment")
    cap1.print()

    p1.setAlignStrategy(AlignCenter())
    p2.setAlignStrategy(AlignRight())
    p3.setAlignStrategy(AlignLeft())
    print("Printing with alignment")
    cap1.print()

    
